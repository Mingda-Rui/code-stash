/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
plugins {
    id 'java'
    id 'base'
}

// Accessing property of the Project object
println name
println project.name

// Using local variables
// Local variables are declared with the `def` keyword.
// They are only visible in the scope where they have been declared.
// Local variables are a feature of the underlying Groovy language.
def dest = "dest"

task copy(type: Copy) {
    from "source"
    into dest
}

// Using extra properties
// Extra properties can be added, read and set via the owing object's `ext` property.
// Alternatively, an `ext` block can be used to add multiple properties at once.
ext {
    springVersion = "3.1.0.RELEASE"
    emailNotification = "build@master.org"
}

sourceSets.all { ext.purpose = null }

sourceSets {
    main {
        purpose = "production"
    }
    test {
        purpose = "test"
    }
    plugin {
        purpose = "production"
    }
}

task printProperties {
    doLast {
        println springVersion
        println emailNotification
        sourceSets.matching { it.purpose == "production" }.each {println it.name}
    }
}

import java.text.FieldPosition

task configure {
    doLast {
        def pos = configure(new FieldPosition(10)) {
            beginIndex = 1
            endIndex = 5
        }
        println pos.beginIndex
        println pos.endIndex
    }
}

// Configuring arbitrary objects using a script
// task configure2 {
//     doLast {
//         def pos = new FieldPosition(10)
//         // Apply the script
//         apply from: 'other.gradle', to: pos
//         println pos.beginIndex
//         println pos.endIndex
//     }
// }

// Iterale each method example in Groovy
// Iterable gets an each() method
configurations.runtimeClasspath.each { File f -> println f }

// Property accessors
// Using a getter method
println project.buildDir
println getProject().getBuilderDir()

// Using a setter method
project.buildDir = 'target'
getProject().setBuildDir('target')

// Method call without parentheses
test.systemProperty 'some.prop', 'value'
test.systemProperty('some.prop', 'value')

// List and map literals
// List literal
test.includes = ['org/gradle/api/**', 'org/gradle/internal/**']

List<String> list = new ArrayList<String>()
list.add('org/gradle/api/**')
list.add('org/gradle/internal/**')
test.includes = list

// Map literal.
Map<String, String> map = [key1: 'value1', key2: 'value2']

// Groovy will coerce named arguments
// into a single map argument
apply plugin: 'java'


// Closures as the last parameter in a method
// The Gradle DSL uses closures in many places. When the last parameter of a method is
// a closure, you can place the closure after the method call:
// Example 10. Closure as method parameter
repositories {
    println "in a closure"
}
repositories() { println "in a closure" }
repositories({ println "in a closure" })

// Closure delegate
// Each closure has a delegate object, which Groovy uses to look up variable and method references which are not local variables or
// parameters of the closure. Gradle uses this for configuration closures, where the delegate object is set to the object to be 
// confiured.
// Example 11. Closure delegates
depedencies {
    assert delegate == project.dependencies
    testImplementation("junit:junit:4.13")
    delegate.testImplementation('junit:junit:4.13')
}